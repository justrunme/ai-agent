name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      weaviate:
        image: semitechnologies/weaviate:latest
        ports:
          - 8080:8080
        env:
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: true
          PERSISTENCE_DATA_PATH: /var/lib/weaviate
        options: >-
          --health-cmd "curl -f http://localhost:8080/v1/.well-known/ready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        flake8 agent/ log_ingestor/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 agent/ log_ingestor/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=agent --cov-report=xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        WEAVIATE_URL: http://localhost:8080
    
    - name: Run integration tests
      run: |
        python test_agent.py
        python test_logs.py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        WEAVIATE_URL: http://localhost:8080
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker images
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/ai-devops-agent:latest ./agent
        docker build -t ${{ secrets.DOCKER_USERNAME }}/ai-devops-log-ingestor:latest ./log_ingestor
        docker push ${{ secrets.DOCKER_USERNAME }}/ai-devops-agent:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/ai-devops-log-ingestor:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        echo "This could be to Kubernetes, AWS, or any other platform" 